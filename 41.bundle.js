(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{26:function(e,n,t){"use strict";t.d(n,"g",(function(){return Initializer})),t.d(n,"p",(function(){return Zeros})),t.d(n,"j",(function(){return Ones})),t.d(n,"a",(function(){return Constant})),t.d(n,"m",(function(){return RandomUniform})),t.d(n,"l",(function(){return RandomNormal})),t.d(n,"n",(function(){return TruncatedNormal})),t.d(n,"f",(function(){return Identity})),t.d(n,"o",(function(){return VarianceScaling})),t.d(n,"c",(function(){return GlorotUniform})),t.d(n,"b",(function(){return GlorotNormal})),t.d(n,"d",(function(){return HeNormal})),t.d(n,"e",(function(){return HeUniform})),t.d(n,"h",(function(){return LeCunNormal})),t.d(n,"i",(function(){return LeCunUniform})),t.d(n,"k",(function(){return Orthogonal})),t.d(n,"r",(function(){return m})),t.d(n,"q",(function(){return f}));var s=t(0),r=t(21),a=t(31),i=t(8),o=t(448),l=t(12),c=t(47);class Initializer extends s.df.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Zeros extends Initializer{apply(e,n){return Object(s.Mf)(e,n)}}Zeros.className="Zeros",s.df.registerClass(Zeros);class Ones extends Initializer{apply(e,n){return Object(s.Ne)(e,n)}}Ones.className="Ones",s.df.registerClass(Ones);class Constant extends Initializer{constructor(e){if(super(),"object"!=typeof e)throw new i.e("Expected argument of type ConstantConfig but got "+e);if(void 0===e.value)throw new i.e("config must have value set but got "+e);this.value=e.value}apply(e,n){return Object(s.Af)(()=>Object(s.Ie)(Object(s.af)(this.value),Object(s.Ne)(e,n)))}getConfig(){return{value:this.value}}}Constant.className="Constant",s.df.registerClass(Constant);class RandomUniform extends Initializer{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,n){return Object(s.Te)(e,this.minval,this.maxval,n)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}RandomUniform.className="RandomUniform",s.df.registerClass(RandomUniform);class RandomNormal extends Initializer{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,n){if("float32"!==(n=n||"float32")&&"int32"!==n)throw new i.c(`randomNormal does not support dType ${n}.`);return r.n(e,this.mean,this.stddev,n,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}RandomNormal.className="RandomNormal",s.df.registerClass(RandomNormal);class TruncatedNormal extends Initializer{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,n){if("float32"!==(n=n||"float32")&&"int32"!==n)throw new i.c(`truncatedNormal does not support dType ${n}.`);return Object(s.Ef)(e,this.mean,this.stddev,n,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}TruncatedNormal.className="TruncatedNormal",s.df.registerClass(TruncatedNormal);class Identity extends Initializer{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,n){return Object(s.Af)(()=>{if(2!==e.length||e[0]!==e[1])throw new i.e("Identity matrix initializer can only be used for 2D square matrices.");return Object(s.Ie)(this.gain,Object(s.he)(e[0]))})}getConfig(){return{gain:this.gain}}}Identity.className="Identity",s.df.registerClass(Identity);class VarianceScaling extends Initializer{constructor(e){if(super(),e.scale<0)throw new i.e("scale must be a positive float. Got: "+e.scale);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var n;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,n=this.mode,Object(l.d)(o.b,"FanMode",n),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Object(l.d)(o.a,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,n){const t=function(e,n="channelsLast"){let t,s;if(Object(a.a)(n),2===e.length)t=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===n){const n=Object(c.a)(e,2);t=e[1]*n,s=e[0]*n}else if("channelsLast"===n){const n=Object(c.a)(e,0,e.length-2);t=e[e.length-2]*n,s=e[e.length-1]*n}}else{const n=Object(c.a)(e);t=Math.sqrt(n),s=Math.sqrt(n)}return[t,s]}(e),r=t[0],o=t[1];let l=this.scale;if("fanIn"===this.mode?l/=Math.max(1,r):"fanOut"===this.mode?l/=Math.max(1,o):l/=Math.max(1,(r+o)/2),"normal"===this.distribution){const t=Math.sqrt(l);if("float32"!==(n=n||"float32")&&"int32"!==n)throw new i.c(`${this.getClassName()} does not support dType ${n}.`);return Object(s.Ef)(e,0,t,n,this.seed)}{const t=Math.sqrt(3*l);return Object(s.Te)(e,-t,t,n)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}VarianceScaling.className="VarianceScaling",s.df.registerClass(VarianceScaling);class GlorotUniform extends VarianceScaling{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return VarianceScaling.className}}GlorotUniform.className="GlorotUniform",s.df.registerClass(GlorotUniform);class GlorotNormal extends VarianceScaling{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return VarianceScaling.className}}GlorotNormal.className="GlorotNormal",s.df.registerClass(GlorotNormal);class HeNormal extends VarianceScaling{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return VarianceScaling.className}}HeNormal.className="HeNormal",s.df.registerClass(HeNormal);class HeUniform extends VarianceScaling{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return VarianceScaling.className}}HeUniform.className="HeUniform",s.df.registerClass(HeUniform);class LeCunNormal extends VarianceScaling{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return VarianceScaling.className}}LeCunNormal.className="LeCunNormal",s.df.registerClass(LeCunNormal);class LeCunUniform extends VarianceScaling{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return VarianceScaling.className}}LeCunUniform.className="LeCunNormal",s.df.registerClass(LeCunUniform);class Orthogonal extends Initializer{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new i.c("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,n){return Object(s.Af)(()=>{if(e.length<2)throw new i.c("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const n=e[0]>e[1]?[e[1],e[0]]:e,t=r.n(n,0,1,"float32");let a=s.te.gramSchmidt(t);return e[0]>e[1]&&(a=Object(s.Df)(a)),Object(s.Ie)(this.gain,a)})}getConfig(){return{gain:this.gain,seed:this.seed}}}Orthogonal.className="Orthogonal",s.df.registerClass(Orthogonal);const u={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function d(e,n={}){return Object(l.g)(e,s.df.SerializationMap.getMap().classNameMap,n,"initializer")}function m(e){return Object(l.l)(e)}function f(e){if("string"==typeof e){const n=e in u?u[e]:e;if("GlorotNormal"===n)return new GlorotNormal;if("GlorotUniform"===n)return new GlorotUniform;if("HeNormal"===n)return new HeNormal;if("HeUniform"===n)return new HeUniform;if("LeCunNormal"===n)return new LeCunNormal;if("LeCunUniform"===n)return new LeCunUniform;{const e={};return e.className=n,e.config={},d(e)}}return e instanceof Initializer?e:d(e)}}}]);